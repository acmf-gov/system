// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String?
  password   String
  isAdmin    Boolean  @default(false)
  publicKey  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  orders     Order[]
  messages   Message[]
  
  @@map("users")
}

model Barca {
  id                   String   @id @default(cuid())
  name                 String
  type                 String
  pricePerGram         Decimal  @db.Decimal(10, 2)
  targetQuantityGrams  Int
  totalOrderedGrams    Int      @default(0)
  status               BarcaStatus @default(OPEN)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  orders               Order[]
  messages             Message[]
  
  @@map("barcas")
}

model Order {
  id          String   @id @default(cuid())
  barcaId     String
  userId      String?
  quantityGrams Int
  clientName  String
  phone       String
  address     String
  neighborhood String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  barca       Barca    @relation(fields: [barcaId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id])
  
  @@map("orders")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  barcaId    String?
  ciphertext String   @db.LongText
  nonce      String
  meta       Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  barca      Barca?   @relation(fields: [barcaId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

enum BarcaStatus {
  OPEN
  CLOSED
  COMPLETED
}